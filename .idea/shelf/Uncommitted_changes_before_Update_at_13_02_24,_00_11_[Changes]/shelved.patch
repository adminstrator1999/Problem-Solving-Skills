Index: neetcode/basics/implement_data_structures/design_dynamic_array_(resizable_array).py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/neetcode/basics/implement_data_structures/design_dynamic_array_(resizable_array).py b/neetcode/basics/implement_data_structures/design_dynamic_array_(resizable_array).py
new file mode 100644
--- /dev/null	(date 1707076607005)
+++ b/neetcode/basics/implement_data_structures/design_dynamic_array_(resizable_array).py	(date 1707076607005)
@@ -0,0 +1,79 @@
+"""
+Design Dynamic Array (Resizable Array)
+Design a Dynamic Array (aka a resizable array) class, such as an ArrayList in Java or a vector in C++.
+
+Your DynamicArray class should support the following operations:
+
+DynamicArray(int capacity) will initialize an empty array with a capacity of capacity, where capacity > 0.
+int get(int i) will return the element at index i. Assume that index i is valid.
+void set(int i, int n) will set the element at index i to n. Assume that index i is valid.
+void pushback(int n) will push the element n to the end of the array.
+int popback() will pop and return the element at the end of the array. Assume that the array is non-empty.
+void resize() will double the capacity of the array.
+int getSize() will return the number of elements in the array.
+int getCapacity() will return the capacity of the array.
+If we call void pushback(int n) but the array is full, we should resize the array first.
+
+Example 1:
+
+Input:
+["Array", 1, "getSize", "getCapacity"]
+
+Output:
+[null, 0, 1]
+Example 2:
+
+Input:
+["Array", 1, "pushback", 1, "getCapacity", "pushback", 2, "getCapacity"]
+
+Output:
+[null, null, 1, null, 2]
+Example 3:
+
+Input:
+["Array", 1, "getSize", "getCapacity", "pushback", 1, "getSize", "getCapacity", "pushback", 2, "getSize", "getCapacity", "get", 1, "set", 1, 3, "get", 1, "popback", "getSize", "getCapacity"]
+
+Output:
+[null, 0, 1, null, 1, 1, null, 2, 2, 2, null, 3, 3, 1, 2]
+Note:
+
+The index i provided to get(int i) and set(int i) is guranteed to be greater than or equal to 0 and less than the number of elements in the array.
+"""
+
+
+class DynamicArray:
+
+    def __init__(self, capacity: int):
+        self.capacity = capacity
+        self.array = [0 for i in range(self.capacity)]
+        self.size = 0
+
+    def get(self, i: int) -> int:
+        return self.array[i]
+
+    def set(self, i: int, n: int) -> None:
+        self.array[i] = n
+
+    def pushback(self, n: int) -> None:
+        if self.size == self.capacity:
+            self.resize()
+        self.array[self.size] = n
+        self.size += 1
+
+    def popback(self) -> int:
+        if self.size > 0:
+            self.size -= 1
+        return self.array[self.size]
+
+    def resize(self) -> None:
+        self.capacity *= 2
+        new_arr = [0 for i in range(self.capacity)]
+        for i in range(self.size):
+            new_arr[i] = self.array[i]
+        self.array = new_arr
+
+    def getSize(self) -> int:
+        return self.size
+
+    def getCapacity(self) -> int:
+        return self.capacity
\ No newline at end of file
